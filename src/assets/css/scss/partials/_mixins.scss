/*Mixins */

//gradient
@mixin gradient($degree, $topColor, $topValue, $bottomColor, $bottomValue){
    background-color:$topColor;
    background-image: linear-gradient($degree, $topColor $topValue, $bottomColor $bottomValue); 
}
 
@mixin clearfix{
    &:before,
    &:after {
        content: " ";
        display: table;
    }
    &:after {
        clear: both;
    }
}

//opacity
@mixin opacity($value){
    opacity: $value;
    filter: alpha(opacity=$value*100);
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity="$value*100")";
}

//hide text
@mixin hide-text{
    overflow: hidden;
    text-indent: -9999px;
    display: block;
}



// bp (breakpoint) mixin
// these mixins build breakpoints mixins based off of the breakpoint matrix in the main configuration file
//      or from a custom number entered into the mixin
//      
// Paramters: 
//      - $breakpoint:  either a string referenceing a key value from $breakpoints or a number (with unit)
//      - $minOrMax:    string indicating whether to declare min-width or max-width on the media query
//                          - if no value is given, the mixin defaults to min-width   
//      
// usage example:
//      
//      // pull in the values from the already established 'med' key in the $breakpoints map 
//      // uses min-width in the media query
//      .someclass {
//          @include bp('med') {
//              some: style;
//          }
//      }
//      
//      // use a custom breakpoint 
//      // uses max-width in the media query
//      .someclass {
//          @include bp(1000px, 'max') {
//              some: style;
//          }
//      }
// 
// using @include bp-min('med') will log an error if the 'med' key does not exist in the breakpoints map
$bpFeatures: "min", "max", "within";

@mixin bp($feature, $width:"", $within_max:""){

  $stringWidth: false;
  $within_max_set: false;

  //if width is not blank and string, get values from $breakpoints
  @if not ($width == "") and (type-of($width) == "string"){
    @if map-has-key($bp, $width){
      $mapWidth: map-get($bp, $width);
      $maxWidth: map-get($mapWidth, "max");
      $minWidth: map-get($mapWidth, "min");
      $stringWidth: true;
    }
  }

  //check if $within_max set and is number
  @if not($within_max == "") and type-of($within_max == "number") {
    $within_max_set: true;
  }

  // if $feature is a string
  @if type-of($feature) == "string" {

    //lowercase the string
    $feature: to-lower-case($feature);

    //if $feature within $bpFeatures
    @if index($bpFeatures, $feature) {

      // if $feature value is 'within'
      @if $feature == "within"{

        //if width is not string and $within_max has a number value
        @if (not $stringWidth and $within_max_set) or ($stringWidth and not $within_max_set){

          @if not $stringWidth {
            $maxWidth: $within_max;
            $minWidth: $width;
          }

          @if $maxWidth < $minWidth{
            @error "SASS Mixin bp(): Breakpoint min and max not in correct order. Should follow: bp('within', $min, $max)";
          }

          @media only screen and (min-width: $minWidth) and (max-width: $maxWidth){
            @content;
          } 

          //if width is string and no within max set
        } @else {

          @error "SASS Mixin bp(): Width values incorrect. Values need to be within $breakpoints or a min and max number.";

        }
      }
      @else{
        @if $within_max_set{
          @warn "SASS Mixin bp(): $within_max value not set."
        }

        @if not $stringWidth{
          $minWidth: $width;
          $maxWidth: $width;
        }

        @if $feature == "min"{

          @media only screen and (min-width: $minWidth){
            @content;
          } 
          
        } 

        @else if $feature == "max" {

          @media only screen and (max-width: $maxWidth){
            @content;
          } 

        }    
      } 
    }

  } @else{
    @error "SASS Mixin bp(): $feature paramater not string or within $bpFeatures.";
  }
}
